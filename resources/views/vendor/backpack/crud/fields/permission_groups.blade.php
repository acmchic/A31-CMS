{{-- Clean permission groups field with modular structure --}}
@php
$currentPermissions = [];
if (isset($entry) && $entry) {
    $currentPermissions = $entry->permissions->pluck('name')->toArray();
}
@endphp

<div class="form-group">
    <label class="form-label">Ph√¢n quy·ªÅn</label>
    <div id="permission-groups-container" data-current-permissions='@json($currentPermissions)'>
        {{-- Content will be generated by JavaScript --}}
    </div>
</div>

@push('after_styles')
<style>
.permission-groups {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 20px;
    margin-top: 15px;
}

.permission-group {
    border: 1px solid #e3e6f0;
    border-radius: 8px;
    overflow: hidden;
    background: white;
}

.group-header {
    background: #f8f9fa;
    padding: 15px;
    border-bottom: 1px solid #e3e6f0;
    display: flex;
    align-items: center;
    font-weight: 600;
    color: #495057;
}

.group-checkbox {
    margin-right: 12px;
    transform: scale(1.2);
}

.group-content {
    padding: 15px;
}

.permission-item {
    display: flex;
    align-items: center;
    padding: 5px 0;
    margin-bottom: 5px;
}

.permission-item input[type="checkbox"] {
    margin-right: 10px;
}

.permission-item label {
    margin: 0;
    cursor: pointer;
    flex: 1;
    font-size: 14px;
}
</style>
@endpush

@push('after_scripts')
<script>
$(document).ready(function() {
    // Clean module structure
    var modules = {
        'system': {
            title: 'üè† Qu·∫£n l√Ω h·ªá th·ªëng',
            permissions: ['dashboard.view', 'user.view', 'user.create', 'user.edit', 'user.delete', 'role.view', 'role.create', 'role.edit', 'role.delete', 'permission.view', 'permission.create', 'permission.edit', 'permission.delete']
        },
        'organization': {
            title: 'üè¢ C∆° c·∫•u t·ªï ch·ª©c',
            permissions: ['department.view', 'department.create', 'department.edit', 'department.delete', 'department.approve', 'employee.view', 'employee.create', 'employee.edit', 'employee.delete', 'employee.approve']
        },
        'vehicle_registration': {
            title: 'üöó ƒêƒÉng k√Ω xe',
            permissions: ['vehicle_registration.view', 'vehicle_registration.create', 'vehicle_registration.edit', 'vehicle_registration.delete', 'vehicle_registration.assign', 'vehicle_registration.approve', 'vehicle_registration.reject', 'vehicle_registration.download_pdf', 'vehicle_registration.check_signature']
        },
        'personnel_report': {
            title: 'üìä B√°o c√°o qu√¢n s·ªë',
            permissions: ['report.view', 'report.create', 'report.edit', 'report.delete', 'report.approve', 'leave.view', 'leave.create', 'leave.edit', 'leave.delete', 'leave.approve']
        },
        'profile': {
            title: 'üë§ Qu·∫£n l√Ω c√° nh√¢n',
            permissions: ['profile.view', 'profile.edit']
        }
    };

    // Permission display names
    var displayNames = {
        'dashboard.view': 'Xem b·∫£ng ƒëi·ªÅu khi·ªÉn',
        'user.view': 'Xem ng∆∞·ªùi d√πng',
        'user.create': 'T·∫°o ng∆∞·ªùi d√πng',
        'user.edit': 'S·ª≠a ng∆∞·ªùi d√πng',
        'user.delete': 'X√≥a ng∆∞·ªùi d√πng',
        'role.view': 'Xem vai tr√≤',
        'role.create': 'T·∫°o vai tr√≤',
        'role.edit': 'S·ª≠a vai tr√≤',
        'role.delete': 'X√≥a vai tr√≤',
        'permission.view': 'Xem quy·ªÅn h·∫°n',
        'permission.create': 'T·∫°o quy·ªÅn h·∫°n',
        'permission.edit': 'S·ª≠a quy·ªÅn h·∫°n',
        'permission.delete': 'X√≥a quy·ªÅn h·∫°n',
        'department.view': 'Xem ph√≤ng ban',
        'department.create': 'T·∫°o ph√≤ng ban',
        'department.edit': 'S·ª≠a ph√≤ng ban',
        'department.delete': 'X√≥a ph√≤ng ban',
        'department.approve': 'Ph√™ duy·ªát ph√≤ng ban',
        'employee.view': 'Xem nh√¢n vi√™n',
        'employee.create': 'T·∫°o nh√¢n vi√™n',
        'employee.edit': 'S·ª≠a nh√¢n vi√™n',
        'employee.delete': 'X√≥a nh√¢n vi√™n',
        'employee.approve': 'Ph√™ duy·ªát nh√¢n vi√™n',
        'vehicle_registration.view': 'Xem danh s√°ch ƒëƒÉng k√Ω xe',
        'vehicle_registration.create': 'T·∫°o ƒëƒÉng k√Ω xe m·ªõi',
        'vehicle_registration.edit': 'S·ª≠a ƒëƒÉng k√Ω xe',
        'vehicle_registration.delete': 'X√≥a ƒëƒÉng k√Ω xe',
        'vehicle_registration.assign': 'Ph√¢n c√¥ng xe v√† l√°i xe',
        'vehicle_registration.approve': 'Ph√™ duy·ªát ƒëƒÉng k√Ω xe',
        'vehicle_registration.reject': 'T·ª´ ch·ªëi ƒëƒÉng k√Ω xe',
        'vehicle_registration.download_pdf': 'T·∫£i v·ªÅ ƒë√£ k√Ω',
        'report.view': 'Xem b√°o c√°o qu√¢n s·ªë',
        'report.create': 'T·∫°o b√°o c√°o qu√¢n s·ªë',
        'report.edit': 'S·ª≠a b√°o c√°o qu√¢n s·ªë',
        'report.delete': 'X√≥a b√°o c√°o qu√¢n s·ªë',
        'report.approve': 'Ph√™ duy·ªát b√°o c√°o qu√¢n s·ªë',
        'leave.view': 'Xem ƒë∆°n ngh·ªâ ph√©p',
        'leave.create': 'T·∫°o ƒë∆°n ngh·ªâ ph√©p',
        'leave.edit': 'S·ª≠a ƒë∆°n ngh·ªâ ph√©p',
        'leave.delete': 'X√≥a ƒë∆°n ngh·ªâ ph√©p',
        'leave.approve': 'Ph√™ duy·ªát ƒë∆°n ngh·ªâ ph√©p',
        'profile.view': 'Xem th√¥ng tin c√° nh√¢n',
        'profile.edit': 'S·ª≠a th√¥ng tin c√° nh√¢n'
    };

    // Get permission IDs from database (1-57 clean structure)
    function getPermissionId(permissionName) {
        // This will be loaded from server or use API call
        // For now, return a default mapping based on our seeder
        var permissionIds = @json(\Spatie\Permission\Models\Permission::pluck('id', 'name')->toArray());
        return permissionIds[permissionName];
    }

    function createPermissionGroups() {
        var container = $('#permission-groups-container');
        if (container.length === 0) return;

        container.html('<div class="permission-groups"></div>');
        var groupsContainer = container.find('.permission-groups');

        // Create groups
        Object.keys(modules).forEach(function(moduleKey) {
            var module = modules[moduleKey];
            var groupHtml = '<div class="permission-group">';
            groupHtml += '<div class="group-header">';
            groupHtml += '<input type="checkbox" class="group-checkbox" id="group_' + moduleKey + '" data-group="' + moduleKey + '">';
            groupHtml += '<label for="group_' + moduleKey + '">' + module.title + '</label>';
            groupHtml += '</div>';
            groupHtml += '<div class="group-content">';

            // Add permissions
            module.permissions.forEach(function(permission) {
                var permissionId = getPermissionId(permission);
                var displayName = displayNames[permission] || permission;

                if (permissionId) {
                    groupHtml += '<div class="permission-item">';
                    groupHtml += '<input type="checkbox" name="permissions[]" value="' + permissionId + '" id="permission_' + permission.replace(/\./g, '_') + '" data-group="' + moduleKey + '">';
                    groupHtml += '<label for="permission_' + permission.replace(/\./g, '_') + '">' + displayName + '</label>';
                    groupHtml += '</div>';
                }
            });

            groupHtml += '</div></div>';
            groupsContainer.append(groupHtml);
        });

        // Load current values
        loadCurrentValues();
        updateGroupCheckboxes();
    }

    function loadCurrentValues() {
        var container = $('#permission-groups-container');
        var currentPermissions = JSON.parse(container.attr('data-current-permissions') || '[]');

        console.log('Loading current permissions:', currentPermissions);

        currentPermissions.forEach(function(permissionName) {
            var permissionId = getPermissionId(permissionName);
            console.log('Permission:', permissionName, '=> ID:', permissionId);

            if (permissionId) {
                var checkbox = $('input[name="permissions[]"][value="' + permissionId + '"]');
                checkbox.prop('checked', true);
                console.log('Checked checkbox for:', permissionName);
            }
        });
    }

    function updateGroupCheckboxes() {
        Object.keys(modules).forEach(function(moduleKey) {
            var groupCheckbox = $('.group-checkbox[data-group="' + moduleKey + '"]');
            var modulePermissions = $('input[data-group="' + moduleKey + '"]:not(.group-checkbox)');
            var checkedPermissions = modulePermissions.filter(':checked');

            if (checkedPermissions.length === 0) {
                groupCheckbox.prop('checked', false).prop('indeterminate', false);
            } else if (checkedPermissions.length === modulePermissions.length) {
                groupCheckbox.prop('checked', true).prop('indeterminate', false);
            } else {
                groupCheckbox.prop('checked', false).prop('indeterminate', true);
            }
        });
    }

    // Group checkbox handler
    $(document).on('change', '.group-checkbox', function() {
        var moduleKey = $(this).data('group');
        var isChecked = $(this).is(':checked');
        $('input[data-group="' + moduleKey + '"]:not(.group-checkbox)').prop('checked', isChecked);
    });

    // Individual permission handler
    $(document).on('change', 'input[data-group]:not(.group-checkbox)', function() {
        updateGroupCheckboxes();
    });

    // Initialize
    createPermissionGroups();
});
</script>
@endpush
