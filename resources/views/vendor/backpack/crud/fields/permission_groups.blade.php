{{-- Custom permission groups field --}}
@php
$currentPermissions = [];
if (isset($entry) && $entry) {
    $currentPermissions = $entry->permissions->pluck('name')->toArray();
}
@endphp

<div class="form-group">
    <label class="form-label">Các quyền</label>
    <div id="permission-groups-container" data-current-permissions='@json($currentPermissions)'>
        {{-- Content will be generated by JavaScript --}}
    </div>
</div>

@push('after_styles')
<style>
.permission-groups {
    margin-top: 20px;
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 15px;
}

.permission-group {
    margin-bottom: 0;
    border: 1px solid #e3e6f0;
    border-radius: 6px;
    overflow: hidden;
    background: white;
}

.group-header {
    background: #f8f9fa;
    padding: 12px 15px;
    border-bottom: 1px solid #e3e6f0;
    display: flex;
    align-items: center;
    font-weight: 600;
    font-size: 15px;
    color: #495057;
}

.group-checkbox {
    margin-right: 10px;
    transform: scale(1.2);
}

.group-title {
    flex: 1;
    font-size: 15px;
    font-weight: 600;
}

.group-content {
    padding: 15px;
    background: white;
}

.permission-list {
    margin-left: 25px;
    display: grid;
    grid-template-columns: 1fr 1fr 1fr;
    gap: 8px 15px;
}

.permission-item {
    display: flex;
    align-items: center;
    padding: 3px 0;
    margin-bottom: 2px;
}

.permission-item input[type="checkbox"] {
    margin-right: 8px;
    transform: scale(1.0);
}

.permission-item label {
    margin: 0;
    font-size: 13px;
    cursor: pointer;
    flex: 1;
    color: #6c757d;
}
</style>
@endpush

@push('after_scripts')
<script>
$(document).ready(function() {
    // Define permission groups
    var permissionGroups = {
        'dashboard': {
            title: 'Bảng Điều Khiển',
            permissions: ['view dashboard']
        },
        'data_management': {
            title: 'Quản Lý Dữ Liệu',
            permissions: ['view own data', 'edit own data', 'delete own data', 'view all data', 'edit all data', 'delete all data']
        },
        'user_management': {
            title: 'Quản Lý Người Dùng',
            permissions: ['manage users', 'manage roles', 'manage permissions', 'view_user_profile']
        },
        'department_management': {
            title: 'Quản Lý Phòng Ban',
            permissions: ['manage departments', 'view all departments', 'edit all departments', 'manage department users', 'view_department']
        },
        'leave_management': {
            title: 'Quản Lý Nghỉ Phép',
            permissions: ['approve leaves', 'approve-leave-request', 'reject-leave-request', 'view-leave-request', 'view_leave_request']
        },
        'vehicle_management': {
            title: 'Quản Lý Phương Tiện',
            permissions: ['manage vehicles', 'assign vehicles', 'view vehicle requests', 'approve vehicle step2']
        },
        'reports': {
            title: 'Báo Cáo',
            permissions: ['view reports', 'view_daily_report']
        },
        'employee_management': {
            title: 'Quản Lý Nhân Viên',
            permissions: ['view_employee']
        },
        'system_settings': {
            title: 'Cài Đặt Hệ Thống',
            permissions: ['system settings']
        },
        'pdf_signatures': {
            title: 'Ký Số PDF',
            permissions: ['sign-pdf']
        }
    };

    // Get permission IDs mapping
    function getPermissionIds() {
        // Static mapping based on actual database structure
        return {
            'view dashboard': 1,
            'view own data': 2,
            'edit own data': 3,
            'delete own data': 4,
            'view all data': 5,
            'edit all data': 6,
            'delete all data': 7,
            'manage users': 8,
            'manage roles': 9,
            'manage permissions': 10,
            'manage departments': 11,
            'system settings': 12,
            'view all departments': 13,
            'edit all departments': 14,
            'approve leaves': 15,
            'view reports': 16,
            'manage department users': 17,
            'manage vehicles': 18,
            'assign vehicles': 19,
            'view vehicle requests': 20,
            'approve vehicle step2': 21,
            'approve-leave-request': 22,
            'reject-leave-request': 23,
            'view-leave-request': 24,
            'sign-pdf': 25,
            'view_employee': 26,
            'view_leave_request': 27,
            'view_daily_report': 28,
            'view_department': 29,
            'view_user_profile': 30
        };
    }

    // Get current permissions for editing
    function getCurrentPermissions() {
        var currentPermissions = [];
        
        // Try to get from data attribute
        var container = $('#permission-groups-container');
        if (container.length > 0) {
            var dataValue = container.attr('data-current-permissions');
            if (dataValue) {
                try {
                    currentPermissions = JSON.parse(dataValue);
                    console.log('Current permissions from data attribute:', currentPermissions);
                } catch (e) {
                    console.log('Error parsing current permissions:', e);
                }
            }
        }
        
        // Fallback: Try to get from CRUD entry
        if (currentPermissions.length === 0 && typeof crud !== 'undefined' && crud.entry && crud.entry.permissions) {
            if (Array.isArray(crud.entry.permissions)) {
                currentPermissions = crud.entry.permissions.map(function(p) {
                    return p.name || p;
                });
            }
        }
        
        console.log('Current permissions loaded:', currentPermissions);
        return currentPermissions;
    }

    // Translation mapping
    var translations = {
        'view dashboard': 'Xem bảng điều khiển',
        'view own data': 'Xem dữ liệu cá nhân',
        'edit own data': 'Chỉnh sửa dữ liệu cá nhân',
        'delete own data': 'Xóa dữ liệu cá nhân',
        'view all data': 'Xem tất cả dữ liệu',
        'edit all data': 'Chỉnh sửa tất cả dữ liệu',
        'delete all data': 'Xóa tất cả dữ liệu',
        'manage users': 'Quản lý người dùng',
        'manage roles': 'Quản lý vai trò',
        'manage permissions': 'Quản lý quyền hạn',
        'view_user_profile': 'Xem hồ sơ người dùng',
        'manage departments': 'Quản lý phòng ban',
        'view all departments': 'Xem tất cả phòng ban',
        'edit all departments': 'Chỉnh sửa tất cả phòng ban',
        'manage department users': 'Quản lý người dùng phòng ban',
        'view_department': 'Xem phòng ban',
        'approve leaves': 'Phê duyệt nghỉ phép',
        'approve-leave-request': 'Phê duyệt đơn xin nghỉ phép',
        'reject-leave-request': 'Từ chối đơn xin nghỉ phép',
        'view-leave-request': 'Xem đơn xin nghỉ phép',
        'view_leave_request': 'Xem đơn xin nghỉ phép',
        'manage vehicles': 'Quản lý phương tiện',
        'assign vehicles': 'Phân công phương tiện',
        'view vehicle requests': 'Xem yêu cầu phương tiện',
        'approve vehicle step2': 'Phê duyệt phương tiện cấp 2',
        'view reports': 'Xem báo cáo',
        'view_daily_report': 'Xem báo cáo hàng ngày',
        'view_employee': 'Xem nhân viên',
        'system settings': 'Cài đặt hệ thống',
        'sign-pdf': 'Ký số PDF'
    };

    // Create permission groups HTML
    function createPermissionGroups() {
        // Find the container
        var container = $('#permission-groups-container');
        if (container.length === 0) {
            console.log('Permission groups container not found');
            return;
        }

        // Get permission IDs from CRUD data or use static mapping
        var permissionIds = getPermissionIds();

        // Clear and create new content
        container.html('<div class="permission-groups"></div>');
        container = container.find('.permission-groups');

        // Create groups
        Object.keys(permissionGroups).forEach(function(groupKey) {
            var group = permissionGroups[groupKey];
            var groupHtml = '<div class="permission-group" data-group="' + groupKey + '">';
            groupHtml += '<div class="group-header">';
            groupHtml += '<input type="checkbox" class="group-checkbox" data-group="' + groupKey + '" id="group_' + groupKey + '">';
            groupHtml += '<label for="group_' + groupKey + '" class="group-title">' + group.title + '</label>';
            groupHtml += '</div>';
            groupHtml += '<div class="group-content">';
            groupHtml += '<div class="permission-list">';

            // Add permissions for this group
            group.permissions.forEach(function(permission) {
                var translatedName = translations[permission] || permission;
                // Get permission ID from the data
                var permissionId = permissionIds[permission];
                
                if (!permissionId) {
                    console.log('No ID found for permission:', permission);
                    return;
                }
                
                groupHtml += '<div class="permission-item">';
                groupHtml += '<input type="checkbox" name="permissions[]" value="' + permissionId + '" id="permission_' + permission.replace(/[^a-zA-Z0-9]/g, '_') + '" data-group="' + groupKey + '">';
                groupHtml += '<label for="permission_' + permission.replace(/[^a-zA-Z0-9]/g, '_') + '">' + translatedName + '</label>';
                groupHtml += '</div>';
            });

            groupHtml += '</div>';
            groupHtml += '</div>';
            groupHtml += '</div>';

            container.append(groupHtml);
        });

        // Load current values from hidden inputs or data attributes
        loadCurrentValues();
        
        // Update group checkboxes based on individual permissions
        updateGroupCheckboxes();
        
        // Debug: Log current state
        console.log('Final state after loading:');
        $('input[name="permissions[]"]:checked').each(function() {
            console.log('Checked permission:', $(this).val(), $(this).next('label').text());
        });
    }

    // Load current values
    function loadCurrentValues() {
        var currentPermissions = getCurrentPermissions();
        var permissionIds = getPermissionIds();
        
        // Set the checkboxes based on current permissions
        currentPermissions.forEach(function(permissionName) {
            var permissionId = permissionIds[permissionName];
            
            if (permissionId) {
                // Find checkbox by value (ID)
                $('input[name="permissions[]"][value="' + permissionId + '"]').prop('checked', true);
                console.log('Checked permission:', permissionName, '=> ID:', permissionId);
            } else {
                console.log('No ID found for permission:', permissionName);
            }
        });
    }

    // Handle group checkbox change
    $(document).on('change', '.group-checkbox', function() {
        var groupKey = $(this).data('group');
        var isChecked = $(this).is(':checked');
        
        // Check/uncheck all permissions in this group
        $('input[data-group="' + groupKey + '"]:not(.group-checkbox)').prop('checked', isChecked);
    });

    // Handle individual permission checkbox change
    $(document).on('change', 'input[data-group]:not(.group-checkbox)', function() {
        var groupKey = $(this).data('group');
        updateGroupCheckbox(groupKey);
    });

    // Update group checkbox based on individual permissions
    function updateGroupCheckbox(groupKey) {
        var groupCheckbox = $('.group-checkbox[data-group="' + groupKey + '"]');
        var groupPermissions = $('input[data-group="' + groupKey + '"]:not(.group-checkbox)');
        var checkedPermissions = groupPermissions.filter(':checked');
        
        console.log('Updating group checkbox for:', groupKey, 'Total:', groupPermissions.length, 'Checked:', checkedPermissions.length);
        
        if (checkedPermissions.length === 0) {
            groupCheckbox.prop('checked', false).prop('indeterminate', false);
        } else if (checkedPermissions.length === groupPermissions.length) {
            groupCheckbox.prop('checked', true).prop('indeterminate', false);
        } else {
            groupCheckbox.prop('checked', false).prop('indeterminate', true);
        }
    }

    // Update all group checkboxes
    function updateGroupCheckboxes() {
        Object.keys(permissionGroups).forEach(function(groupKey) {
            updateGroupCheckbox(groupKey);
        });
    }

    // Form validation before submit
    $('form').on('submit', function(e) {
        var invalidValues = [];
        var checkedPermissions = [];
        
        $('input[name="permissions[]"]:checked').each(function() {
            var value = $(this).val();
            var label = $(this).next('label').text();
            checkedPermissions.push({
                value: value,
                label: label
            });
            
            if (!Number.isInteger(parseInt(value))) {
                invalidValues.push(value);
            }
        });
        
        console.log('Form submit - Checked permissions:', checkedPermissions);
        console.log('Form submit - Total checked:', checkedPermissions.length);
        
        if (invalidValues.length > 0) {
            e.preventDefault();
            alert('Lỗi: Có permission không hợp lệ: ' + invalidValues.join(', '));
            console.log('Invalid permission values:', invalidValues);
            return false;
        }
    });

    // Initialize
    createPermissionGroups();
});
</script>
@endpush

